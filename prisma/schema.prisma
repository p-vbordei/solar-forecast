generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  name             String?
  role             UserRole          @default(USER)
  passwordHash     String?
  isActive         Boolean           @default(true)
  lastLoginAt      DateTime?
  preferences      Json?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  clientId         Int?
  alerts           Alert[]
  auditLogs        AuditLog[]
  forecasts        Forecast[]
  reports          Report[]
  scheduledReports ScheduledReport[]
  client           Client?           @relation(fields: [clientId], references: [id])

  @@index([email])
  @@index([clientId])
  @@map("users")
}

model Client {
  id                  Int                  @id @default(autoincrement())
  name                String
  code                String               @unique
  contactEmail        String?
  contactPhone        String?
  address             String?
  country             String?
  timezone            String               @default("UTC")
  currency            String               @default("EUR")
  isActive            Boolean              @default(true)
  contractStart       DateTime?
  contractEnd         DateTime?
  metadata            Json?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  apiKeys             ApiKey[]
  emailConfigurations EmailConfiguration[]
  locations           Location[]
  users               User[]

  @@index([code])
  @@map("clients")
}

model ApiKey {
  id          String    @id @default(uuid())
  clientId    Int
  name        String
  key         String    @unique
  permissions Json
  isActive    Boolean   @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  client      Client    @relation(fields: [clientId], references: [id])

  @@index([key])
  @@index([clientId])
  @@map("api_keys")
}

model Location {
  id                  String            @id @default(uuid())
  clientId            Int
  name                String
  code                String            @unique
  latitude            Float
  longitude           Float
  timezone            String            @default("UTC")
  altitude            Float?
  address             String?
  city                String?
  region              String?
  country             String?
  capacityMW          Float
  actualCapacityMW    Float?
  capacityKW          Float?
  panelCount          Int?
  panelType           String?
  panelTechnology     String?
  inverterCount       Int?
  inverterType        String?
  inverterModel       String?
  trackingSystem      TrackingType      @default(FIXED)
  tiltAngle           Float?
  azimuthAngle        Float?
  isBifacial          Boolean           @default(false)
  nominalEfficiency   Float?
  temperatureCoeff    Float?
  bifacialityFactor   Float?
  dcOverpowerRatio    Float?
  performanceRatio    Float?
  installationDate    DateTime?
  commissioningDate   DateTime?
  warrantyEndDate     DateTime?
  status              LocationStatus    @default(ACTIVE)
  lastMaintenance     DateTime?
  nextMaintenance     DateTime?
  expectedYield       Float?
  degradationRate     Float?
  locationData        Json?
  plantData           Json?
  performanceData     Json?
  outputConfig        Json?
  calibrationSettings Json?
  monitoringConfig    Json?
  clientConfig        Json?
  notes               String?
  tags                String?
  certificationData   String?
  lastMaintenanceDate DateTime?
  version             Int               @default(1)
  lastCalibrationDate DateTime?
  calibrationStatus   CalibrationStatus @default(PENDING)
  bulkOperationId     String?
  displayCapacity     String?
  displayLocation     String?
  statusDisplay       String?
  metadata            Json?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  deletedAt           DateTime?
  alerts              Alert[]
  forecasts           Forecast[]
  client              Client            @relation(fields: [clientId], references: [id])
  maintenanceLogs     MaintenanceLog[]
  plants              Plant[]
  production          Production[]
  weatherData         WeatherData[]

  @@index([clientId])
  @@index([code])
  @@index([status])
  @@index([latitude, longitude])
  @@index([calibrationStatus])
  @@index([bulkOperationId])
  @@map("locations")
}

model Plant {
  id          String         @id @default(uuid())
  locationId  String
  name        String
  code        String         @unique
  capacityMW  Float
  inverterIds String[]
  status      LocationStatus @default(ACTIVE)
  metadata    Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  location    Location       @relation(fields: [locationId], references: [id])

  @@index([locationId])
  @@index([code])
  @@map("plants")
}

model Forecast {
  id              String         @id @default(uuid())
  timestamp       DateTime
  locationId      String
  powerMW         Float
  powerOutputMW   Float
  energyMWh       Float?
  capacityFactor  Float?
  powerMWQ10      Float?
  powerMWQ25      Float?
  powerMWQ75      Float?
  powerMWQ90      Float?
  powerMWLower    Float?
  powerMWUpper    Float?
  confidence      Float?
  confidenceLevel Float?
  modelType       ModelType
  modelVersion    String?
  modelId         String?
  horizonMinutes  Int
  horizonDays     Int?
  resolution      ResolutionType
  runId           String?
  forecastType    ForecastType   @default(OPERATIONAL)
  temperature     Float?
  ghi             Float?
  dni             Float?
  dhi             Float?
  gti             Float?
  cloudCover      Float?
  windSpeed       Float?
  humidity        Float?
  pressure        Float?
  weatherData     Json?
  qualityScore    Float?
  isValidated     Boolean        @default(false)
  validationNotes String?
  dataQuality     DataQuality    @default(GOOD)
  processingTime  Float?
  inputFeatures   Json?
  modelParameters Json?
  createdAt       DateTime       @default(now())
  createdBy       Int?
  user            User?          @relation(fields: [createdBy], references: [id])
  location        Location       @relation(fields: [locationId], references: [id])

  @@unique([timestamp, locationId])
  @@index([timestamp, locationId], map: "forecasts_time_location_idx")
  @@index([timestamp, modelType], map: "forecasts_time_model_idx")
  @@index([locationId, timestamp(sort: Desc)], map: "forecasts_location_time_desc_idx")
  @@index([modelType, timestamp(sort: Desc)], map: "forecasts_model_time_desc_idx")
  @@index([horizonMinutes, timestamp], map: "forecasts_horizon_time_idx")
  @@index([runId, timestamp], map: "forecasts_run_time_idx")
  @@index([resolution, timestamp], map: "forecasts_resolution_time_idx")
  @@index([forecastType, timestamp], map: "forecasts_type_time_idx")
  @@map("forecasts")
}

model Production {
  id             String   @id @default(uuid())
  timestamp      DateTime
  locationId     String
  powerMW        Float
  capacityFactor Float?
  availability   Float?
  location       Location @relation(fields: [locationId], references: [id])

  @@index([timestamp, locationId], map: "production_time_location_idx")
  @@index([locationId, timestamp(sort: Desc)], map: "production_location_time_desc_idx")
  @@map("production")
}

model WeatherData {
  id          String      @id @default(uuid())
  timestamp   DateTime
  locationId  String
  temperature Float
  humidity    Float
  windSpeed   Float
  cloudCover  Float
  ghi         Float?
  dni         Float?
  dhi         Float?
  source      String
  dataQuality DataQuality @default(GOOD)
  location    Location    @relation(fields: [locationId], references: [id])

  @@index([timestamp, locationId], map: "weather_time_location_idx")
  @@index([locationId, timestamp(sort: Desc)], map: "weather_location_time_desc_idx")
  @@index([timestamp, source], map: "weather_time_source_idx")
  @@index([source, timestamp], map: "weather_source_time_idx")
  @@map("weather_data")
}

model ForecastAccuracy {
  id                String    @id @default(uuid())
  locationId        String
  date              DateTime
  modelType         ModelType
  modelVersion      String?
  mape              Float
  rmse              Float
  mae               Float
  mbe               Float?
  r2                Float?
  skillScore        Float?
  accuracyByHorizon Json?
  sampleCount       Int
  validSamples      Int
  createdAt         DateTime  @default(now())

  @@unique([locationId, date, modelType, modelVersion])
  @@index([locationId])
  @@index([date])
  @@index([modelType])
  @@map("forecast_accuracy")
}

model Alert {
  id                String        @id @default(uuid())
  locationId        String?
  userId            Int?
  type              AlertType
  severity          AlertSeverity
  title             String
  message           String
  details           Json?
  thresholdValue    Float?
  actualValue       Float?
  status            AlertStatus   @default(ACTIVE)
  acknowledgedAt    DateTime?
  acknowledgedBy    Int?
  resolvedAt        DateTime?
  resolvedBy        Int?
  resolution        String?
  triggeredAt       DateTime      @default(now())
  expiresAt         DateTime?
  notificationsSent Json?
  location          Location?     @relation(fields: [locationId], references: [id])
  user              User?         @relation(fields: [userId], references: [id])

  @@index([locationId])
  @@index([status])
  @@index([severity])
  @@index([triggeredAt])
  @@index([type])
  @@map("alerts")
}

model MaintenanceLog {
  id                String            @id @default(uuid())
  locationId        String
  type              MaintenanceType
  category          String?
  description       String
  scheduledAt       DateTime
  startedAt         DateTime?
  completedAt       DateTime?
  duration          Int?
  productionLossMWh Float?
  downtime          Int?
  laborCost         Float?
  partsCost         Float?
  totalCost         Float?
  currency          String            @default("EUR")
  performedBy       String?
  contractor        String?
  notes             String?
  attachments       String[]
  status            MaintenanceStatus @default(SCHEDULED)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  location          Location          @relation(fields: [locationId], references: [id])

  @@index([locationId])
  @@index([scheduledAt])
  @@index([status])
  @@map("maintenance_logs")
}

model Report {
  id          String            @id @default(uuid())
  userId      Int
  type        ReportType
  name        String
  description String?
  parameters  Json
  filters     Json?
  schedule    String?
  isScheduled Boolean           @default(false)
  lastRunAt   DateTime?
  nextRunAt   DateTime?
  format      ReportFormat      @default(PDF)
  outputUrl   String?
  fileSize    Int?
  recipients  String[]
  status      ReportStatus      @default(DRAFT)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  executions  ReportExecution[]
  user        User              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([status])
  @@map("reports")
}

model ReportExecution {
  id          String          @id @default(uuid())
  reportId    String
  startedAt   DateTime        @default(now())
  completedAt DateTime?
  duration    Int?
  status      ExecutionStatus
  outputUrl   String?
  fileSize    Int?
  recordCount Int?
  error       String?
  report      Report          @relation(fields: [reportId], references: [id])

  @@index([reportId])
  @@index([startedAt])
  @@map("report_executions")
}

model ScheduledReport {
  id                  String                     @id @default(uuid())
  userId              Int
  reportType          ReportType
  name                String
  description         String?
  parameters          Json
  filters             Json?
  frequency           ScheduleFrequency
  scheduleTime        String
  startDate           DateTime
  timezone            String                     @default("UTC")
  scheduleDescription String?
  format              ReportFormat               @default(PDF)
  aggregationLevel    String?
  selectedTimezone    String?
  emailRecipients     String[]
  emailEnabled        Boolean                    @default(true)
  locationIds         String[]
  locationDisplay     LocationDisplay            @default(INDIVIDUAL)
  plantIds            String[]
  isActive            Boolean                    @default(true)
  lastRunAt           DateTime?
  nextRunAt           DateTime?
  lastStatus          ExecutionStatus?
  errorCount          Int                        @default(0)
  lastError           String?
  totalRuns           Int                        @default(0)
  successfulRuns      Int                        @default(0)
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  executions          ScheduledReportExecution[]
  user                User                       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([reportType])
  @@index([isActive])
  @@index([nextRunAt])
  @@map("scheduled_reports")
}

model ScheduledReportExecution {
  id                String          @id @default(uuid())
  scheduledReportId String
  startedAt         DateTime        @default(now())
  completedAt       DateTime?
  duration          Int?
  configSnapshot    Json
  status            ExecutionStatus
  outputUrl         String?
  fileSize          Int?
  recordCount       Int?
  emailsSent        Int             @default(0)
  emailRecipients   String[]
  emailStatus       String?
  error             String?
  scheduledReport   ScheduledReport @relation(fields: [scheduledReportId], references: [id])

  @@index([scheduledReportId])
  @@index([startedAt])
  @@index([status])
  @@map("scheduled_report_executions")
}

model MLModel {
  id               String      @id @default(uuid())
  name             String
  version          String
  type             ModelType
  description      String?
  algorithm        String?
  framework        String?
  hyperparameters  Json?
  features         String[]
  targetVariable   String?
  trainMetrics     Json?
  validMetrics     Json?
  testMetrics      Json?
  modelPath        String
  artifactPath     String?
  checksum         String?
  fileSize         Int?
  trainDataStart   DateTime?
  trainDataEnd     DateTime?
  trainSampleCount Int?
  validSampleCount Int?
  testSampleCount  Int?
  status           ModelStatus @default(TRAINING)
  isDefault        Boolean     @default(false)
  isDeployed       Boolean     @default(false)
  deployedAt       DateTime?
  deploymentUrl    String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  trainedBy        String?

  @@unique([name, version])
  @@index([type])
  @@index([status])
  @@index([isDefault])
  @@map("ml_models")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    Int?
  action    String
  entity    String
  entityId  String?
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  sessionId String?
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entity])
  @@index([timestamp])
  @@index([action])
  @@map("audit_logs")
}

model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       Json
  description String?
  category    String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([key])
  @@map("system_configs")
}

model EmailConfiguration {
  id               String          @id @default(uuid())
  clientId         Int?
  name             String
  type             EmailConfigType @default(RECIPIENTS)
  recipients       String[]
  smtpSettings     Json?
  templateSettings Json?
  isActive         Boolean         @default(true)
  isValidated      Boolean         @default(false)
  lastUsedAt       DateTime?
  usageCount       Int             @default(0)
  description      String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  client           Client?         @relation(fields: [clientId], references: [id])

  @@index([clientId])
  @@index([type])
  @@index([isActive])
  @@map("email_configurations")
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  USER
  VIEWER
  API_SERVICE
}

enum CalibrationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  SCHEDULED
}

enum LocationStatus {
  ACTIVE
  MAINTENANCE
  OFFLINE
  DECOMMISSIONED
  PLANNED
}

enum TrackingType {
  FIXED
  SINGLE_AXIS
  DUAL_AXIS
}

enum ResolutionType {
  FIFTEEN_MINUTES
  THIRTY_MINUTES
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
}

enum ForecastType {
  OPERATIONAL
  D_PLUS_1_5
  MONTHLY_CONTINUED
  HISTORICAL
  VALIDATION
}

enum ModelType {
  PHYSICAL
  HYBRID
  ENSEMBLE
  PERSISTENCE
  STATISTICAL
}

enum DataQuality {
  GOOD
  ESTIMATED
  INTERPOLATED
  POOR
  MISSING
  INVALID
}

enum AlertType {
  PRODUCTION_LOW
  PRODUCTION_HIGH
  FORECAST_DEVIATION
  SYSTEM_OFFLINE
  MAINTENANCE_DUE
  WEATHER_WARNING
  DATA_QUALITY
  THRESHOLD_BREACH
  INVERTER_FAULT
  GRID_OUTAGE
  PERFORMANCE_DEGRADATION
}

enum AlertSeverity {
  INFO
  WARNING
  CRITICAL
  EMERGENCY
}

enum AlertStatus {
  ACTIVE
  ACKNOWLEDGED
  RESOLVED
  EXPIRED
  SUPPRESSED
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  PREDICTIVE
  CONDITION_BASED
  EMERGENCY
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

enum ReportType {
  PRODUCTION_SUMMARY
  EFFICIENCY_ANALYSIS
  FORECAST_ACCURACY
  FINANCIAL_SUMMARY
  MAINTENANCE_REPORT
  COMPLIANCE_REPORT
  WEATHER_IMPACT
  LOCATION_COMPARISON
  FORECAST_D1_D5
  FORECAST_MONTHLY_CONTINUED
  CUSTOM
}

enum ReportFormat {
  PDF
  EXCEL
  CSV
  JSON
  HTML
}

enum ReportStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum ScheduleFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  CUSTOM
}

enum LocationDisplay {
  INDIVIDUAL
  AGGREGATED
}

enum ModelStatus {
  TRAINING
  VALIDATING
  TESTING
  ACTIVE
  DEPRECATED
  FAILED
  ARCHIVED
}

enum EmailConfigType {
  RECIPIENTS
  SMTP
  TEMPLATES
  GLOBAL
}
